#ifndef G4FIRE_G4USER_PRIMARYGENERATORACTION_H
#define G4FIRE_G4USER_PRIMARYGENERATORACTION_H

#include <algorithm>
#include <memory>

#include <G4VUserPrimaryGeneratorAction.hh>

#include <fire/config/Parameters.h> 

#include "g4fire/user/PrimaryGenerator.h"

class G4Event;

namespace g4fire::g4user {

/**
 * Implementation of Geant4 primary generator action.
 */
class PrimaryGeneratorAction : public G4VUserPrimaryGeneratorAction {
 public:
  /*
   * Constructor
   *
   * @param params The parameters used to configure the primary
   *                   generator action.
   */
  PrimaryGeneratorAction(fire::config::Parameters& params);

  /**
   * Class destructor.
   */
  virtual ~PrimaryGeneratorAction() = default;

  /**
   * Generate primaries for the event.
   *
   * This is called by the RunManager before being
   * given to the EventManager to process. This means
   * we must create the UserEventInformation here so
   * that it is accessible for including the weights imported
   * by the primary generators.
   *
   * @see G4RunManager::GenerateEvent for where this method is called
   * @see G4RunManager::ProcessOneEvent for where G4RunManager::GenerateEvent is
   * called
   *
   * Set UserInformation for primary vertices if they haven't been set before.
   *
   * Some features downstream of the primaries require certain user info to
   * function properly. This ensures that it happens.
   *
   * Makes sure that each particle on each primary vertex has
   *  1. A defined UserPrimaryParticleInformation member
   *  2. The HepEvtStatus for this primary info is non-zero
   *
   * If we are passed configuration to smear the beam spot,
   * we smear the beam spot around the spot generated by the primary generator.
   *
   * If we are configured to time-shift the primaries,
   * we shift them so that t=0 coincides with primaries
   * arriving at (or coming from) the target.
   *
   * @param event The Geant4 event.
   */
  void GeneratePrimaries(G4Event* event) final override;

 private:
  /// Manager of all generators used by the event
  std::vector<std::unique_ptr<PrimaryGenerator>> generators_;
  /**
   * Flag denoting whether the vertex position of a particle
   * should be smeared.
   */
  bool smear_beamspot_{false};

  /// Extent of the beamspot in x.
  double beamspot_delta_x_{0};

  /// Extent of the beamspot in y. 
  double beamspot_delta_y_{0};

  /// Extent of the beamspot in y. 
  double beamspot_delta_z_{0.};

  /**
   * Should we time-shift so that the primary vertices arrive (or originate)
   * at t=0ns at z=0mm?
   *
   * @note This should remain true unless the user knows what they are doing!
   */
  bool time_shift_primaries_{true};

};  // PrimaryGeneratorAction

}  // namespace g4fire::g4user

#endif  // G4FIRE_G4USER_PRIMARYGENERATORACTION_H
